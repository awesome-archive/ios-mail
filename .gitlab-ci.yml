stages:
  - i18n
  - test
  - report
  - test_flight
  - enterprise
  - bot # comes from translations/generator job

.run_xcodegen_if_needed: &run_xcodegen_if_needed
  - sh xcodeGenHelper.sh
  - git restore . # CI will re-download Pods, so we need to restore them to preserve local changes committed to out repo

.before_script_mac: &before_script_mac
  - cd ProtonMail/ProtonMailUITests
  - sh Tests/TestPlans/scripts/prepare_users.sh
  - cd ..
  - *run_xcodegen_if_needed

.set_up_brew_dependecies: &set_up_brew_dependecies
  - brew bundle --file="$CI_PROJECT_DIR/ProtonMail/Brewfile" --no-upgrade
  - mint bootstrap --link

.enterprise_config_setting: &enterprise_config_setting
  - cd ProtonMail
  - *run_xcodegen_if_needed
  - touch ~/.bashrc
  - curl -sL https://sentry.io/get-cli/ | bash || true
  - base64 -D -o Certificates.p12 <<< $ENTERPRISE_DISTRIBUTION_CERTIFICATE
  - base64 -D -o Siri.mobileprovision <<< $ENTERPRISE_DISTRIBUTION_SIRI_PROVISIONPROFILE
  - base64 -D -o Enterprise.mobileprovision <<< $ENTERPRISE_DISTRIBUTION_APP_PROVISIONPROFILE
  - base64 -D -o PushService.mobileprovision <<< $ENTERPRISE_DISTRIBUTION_PUSHSERVICE_PROVISIONPROFILE
  - base64 -D -o Share.mobileprovision <<< $ENTERPRISE_DISTRIBUTION_SHARE_PROVISIONPROFILE

# --- includes ---
include:
  - project: "translations/generator"
    ref: master
    file: "/jobs/sync-crowdin.gitlab-ci.yml"

  - project: "translations/generator"
    ref: master
    file: "/jobs/commit-locales.gitlab-ci.yml"

variables:
  LC_ALL: "en_US.UTF-8"
  LANG: "en_US.UTF-8"
  GEM_HOME: "$CI_PROJECT_DIR/gem"

unit_tests:
  dependencies: []
  stage: test
  coverage: '/Test Coverage: \d*.\d*%/'
  only:
    - master
    - develop
    - /^release\/.*$/
    - merge_requests
  except:
    - schedules
  variables:
    GIT_DEPTH: 1
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: test_output/slatherOutput/cobertura.xml
    paths:
      - test_output/slatherOutput/
  before_script:
    - git submodule init
    - git submodule update --init --recursive
    - *set_up_brew_dependecies
  script:
    - defaults write com.apple.iphonesimulator ConnectHardwareKeyboard 0 # Fixed UI tests failing on secure field
    - cd ProtonMail
    - *run_xcodegen_if_needed
    - bundle install
    - bundle exec fastlane unit_test
  cache:
    key: "$CI_PROJECT_NAME"
    paths:
      - bundler-cache/
  tags:
    - iOS_ARM_TAIPEI

ui_tests_smoke:
  dependencies: []
  stage: test
  except:
    - schedules
  only:
    refs:
      - master
      - develop
      - /^release\/.*$/
      - merge_requests
  variables:
    GIT_DEPTH: 1
  artifacts:
    when: always
    name: "test-report"
    paths:
      - test_output/TestResults
    expire_in: 10 days
    reports:
      coverage_report:
        coverage_format: cobertura
        path: test_output/slatherOutput/cobertura.xml
      junit:
        - test_output/TestResults/ProtonMailUITests.xcresult/report.junit
  before_script:
    - git submodule init
    - git submodule update --init --recursive
    - *set_up_brew_dependecies
    - *before_script_mac
  script:
    - defaults write com.apple.iphonesimulator ConnectHardwareKeyboard 0 # Fixed UI tests failing on secure field
    - bundle install
    - bundle exec fastlane ui_test
  cache:
    key: "$CI_PROJECT_NAME"
    paths:
      - bundler-cache/
  tags:
    - iOS_UITEST
  allow_failure: false
  
report:ui-tests-smoke:
  image: $CI_REGISTRY/tpe/test-scripts
  stage: report
  dependencies:
    - ui_tests_smoke
  rules:
    - if: '$CI_COMMIT_BRANCH'
      when: never
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
  script:
    - test_reporter.py
      --path test_output/TestResults/ProtonMailUITests.xcresult/
      --platform ios
      --job-name ui_tests_smoke
      --slack-channel mail-ios-uitests
  allow_failure: true

ui_feature_tests:
  dependencies: []
  stage: test
  rules:
    - if: '$TEST_TYPE == "regression" || $TEST_TYPE == "feature"'
  variables:
    GIT_DEPTH: 1
  artifacts:
    when: always
    name: "test-report"
    paths:
      - test_output/TestResults
    expire_in: 10 days
    reports:
      coverage_report:
        coverage_format: cobertura
        path: test_output/slatherOutput/cobertura.xml
      junit: test_output/TestResults/ProtonMailUITests.xcresult/report.junit
  before_script:
    - git submodule init
    - git submodule update --init --recursive
    - *set_up_brew_dependecies
    - *before_script_mac
    - bash <(curl -s https://raw.githubusercontent.com/TitouanVanBelle/XCTestHTMLReport/master/install.sh) '2.0.0'
  script:
    - defaults write com.apple.iphonesimulator ConnectHardwareKeyboard -bool NO # Fixed UI tests failing on secure field
    - bundle install
    - bundle exec fastlane feature_tests
  tags:
    - iOS_UITEST

report:ui_feature_tests:
  image: $CI_REGISTRY/tpe/test-scripts
  stage: report
  dependencies:
    - ui_feature_tests
  variables:
    GIT_DEPTH: 1
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
    - if: '$CI_COMMIT_BRANCH'
      when: never
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - when: manual
  script:
    - test_reporter.py
      --path test_output/TestResults/ProtonMailUITests.xcresult/
      --platform ios
      --job-name $TEST_PLAN
      --slack-channel mail-ios-uitests
  allow_failure: true


# --- Build app and send to testflight
build-app-and-upload:
  dependencies: []
  stage: test_flight
  variables:
    GIT_STRATEGY: clone
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'
      when: manual
      allow_failure: true
  artifacts:
    name: "iOS mail app builds"
    paths:
      - ./ProtonMail/outputs/ProtonMail.app.dSYM.zip
    expire_in: 90 days
  before_script:
    - git submodule init
    - git submodule update --init --recursive
    - *set_up_brew_dependecies
  script:
    - cd ProtonMail
    - *run_xcodegen_if_needed
    - touch ~/.bashrc
    - curl -sL https://sentry.io/get-cli/ | bash || true
    - base64 -D -o Certificates.p12 <<< $DISTRIBUTION_CERTIFICATE
    - bundle install
    - bundle exec fastlane ios build
    - ./fastlane/add_git_tag.sh
  cache:
    key: "$CI_PROJECT_NAME"
    paths:
      - bundler-cache/
  tags:
    - iOS_BUILD

nightly-build-and-upload:
  dependencies: []
  stage: test_flight
  only:
    refs:
      - schedules
    variables:
      - $SCHEDULE_TYPE == "nightly_build"
  artifacts:
    name: "iOS mail app nightly build on develop branch"
    paths:
      - ./ProtonMail/outputs/ProtonMail.app.dSYM.zip
    expire_in: 90 days
  before_script:
    - git submodule init
    - git submodule update --init --recursive
    - *set_up_brew_dependecies
  script:
    - cd ProtonMail
    - *run_xcodegen_if_needed
    - touch ~/.bashrc
    - curl -sL https://sentry.io/get-cli/ | bash || true
    - base64 -D -o Certificates.p12 <<< $DISTRIBUTION_CERTIFICATE
    - bundle install
    - bundle exec fastlane ios build
  cache:
    key: "$CI_PROJECT_NAME"
    paths:
      - bundler-cache/
  tags:
    - iOS_ARM_TAIPEI

# --- Build enterprise app for test and upload
enterprise-test:
  dependencies: []
  stage: enterprise
  variables:
    GIT_DEPTH: 1
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'
      when: manual
      allow_failure: true
  artifacts:
    name: "iOS mail app test enterprise build"
    paths:
      - ./ProtonMail/outputs/ProtonMail.app.dSYM.zip
    expire_in: 90 days
  before_script:
    - git submodule init
    - git submodule update --init --recursive
    - *set_up_brew_dependecies
  script:
    - *enterprise_config_setting
    - bundle install
    - bundle exec fastlane ios enterprise usingTimeStamp:true
  cache:
    key: "$CI_PROJECT_NAME"
    paths:
      - bundler-cache/
  tags:
    - iOS_ARM_TAIPEI

# --- Translation related tasks ---
i18n-sync-crowdin:
  variables:
    I18N_SYNC_CROWDIN_PROJECT: "apple-mail-v4"
    I18N_SYNC_BRANCH: "develop"
  extends: .i18n-sync-crowdin-shared-apple

i18n-commit-locales:
  variables:
    I18N_COMMIT_CROWDIN_PROJECT: "apple-mail-v4"
    I18N_COMMIT_BRANCH_PUSH: "develop"
    I18N_COMMIT_BRANCH_ALLOWED: "develop"
  extends: .i18n-commit-locales-shared-apple2

commit-locales-release:
  stage: i18n
  extends: .i18n-commit-locales-shared-apple2
  when: manual
  variables:
    I18N_COMMIT_BRANCH_PUSH: $CI_COMMIT_REF_NAME
    I18N_COMMIT_CROWDIN_PROJECT: "apple-mail-v4"
  only:
    refs:
      - branches
    variables:
      - $CI_COMMIT_REF_NAME == 'develop'

# sonarqube-check:
#   stage: code_quality
#   image:
#     name: sonarsource/sonar-scanner-cli:latest
#     entrypoint: [""]
#   variables:
#     SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
#     GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
#   cache:
#     key: "${CI_JOB_NAME}"
#     paths:
#       - .sonar/cache
#   script:
#     - sonar-scanner
#   allow_failure: true
#   only:
#     - merge_requests
#     - master # or the name of your main branch
#     - develop
